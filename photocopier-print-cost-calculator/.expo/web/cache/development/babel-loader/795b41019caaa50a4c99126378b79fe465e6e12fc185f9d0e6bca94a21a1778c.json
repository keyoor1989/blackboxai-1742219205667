{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { PhoneAuthProvider, signInWithCredential, signOut as firebaseSignOut, onAuthStateChanged as _onAuthStateChanged, RecaptchaVerifier } from 'firebase/auth';\nimport { auth } from \"./firebaseConfig\";\nimport errorHandler from \"../utils/errorHandler\";\nvar AuthService = function () {\n  function AuthService() {\n    _classCallCheck(this, AuthService);\n    this.verificationId = null;\n    this.auth = auth;\n    this.recaptchaVerifier = null;\n  }\n  return _createClass(AuthService, [{\n    key: \"initRecaptcha\",\n    value: function initRecaptcha(containerId) {\n      var _this = this;\n      try {\n        if (typeof window !== 'undefined' && !this.recaptchaVerifier) {\n          this.recaptchaVerifier = new RecaptchaVerifier(this.auth, containerId, {\n            size: 'normal',\n            callback: function callback() {\n              console.log('reCAPTCHA verified');\n            },\n            'expired-callback': function expiredCallback() {\n              console.log('reCAPTCHA expired');\n              _this.recaptchaVerifier = null;\n              _this.initRecaptcha(containerId);\n            }\n          });\n          this.recaptchaVerifier.render().catch(function (error) {\n            console.error('Error rendering reCAPTCHA:', error);\n            _this.recaptchaVerifier = null;\n          });\n        }\n      } catch (error) {\n        console.error('Error initializing reCAPTCHA:', error);\n        throw errorHandler.handleError(error, {\n          component: 'AuthService',\n          action: 'initRecaptcha'\n        });\n      }\n    }\n  }, {\n    key: \"initiatePhoneVerification\",\n    value: function () {\n      var _initiatePhoneVerification = _asyncToGenerator(function* (phoneNumber) {\n        try {\n          if (!this.recaptchaVerifier) {\n            throw new Error('reCAPTCHA not initialized. Please try again.');\n          }\n          var provider = new PhoneAuthProvider(this.auth);\n          this.verificationId = yield provider.verifyPhoneNumber(phoneNumber, this.recaptchaVerifier);\n          return this.verificationId;\n        } catch (error) {\n          console.error('Error initiating phone verification:', error);\n          if (this.recaptchaVerifier) {\n            yield this.recaptchaVerifier.clear();\n            this.recaptchaVerifier = null;\n          }\n          throw errorHandler.handleError(error, {\n            component: 'AuthService',\n            action: 'initiatePhoneVerification',\n            phoneNumber: phoneNumber\n          });\n        }\n      });\n      function initiatePhoneVerification(_x) {\n        return _initiatePhoneVerification.apply(this, arguments);\n      }\n      return initiatePhoneVerification;\n    }()\n  }, {\n    key: \"verifyCode\",\n    value: function () {\n      var _verifyCode = _asyncToGenerator(function* (code) {\n        try {\n          if (!this.verificationId) {\n            throw new Error('No verification ID found. Please request a new code.');\n          }\n          var credential = PhoneAuthProvider.credential(this.verificationId, code);\n          var userCredential = yield signInWithCredential(this.auth, credential);\n          this.verificationId = null;\n          if (this.recaptchaVerifier) {\n            yield this.recaptchaVerifier.clear();\n            this.recaptchaVerifier = null;\n          }\n          return userCredential.user;\n        } catch (error) {\n          console.error('Error verifying code:', error);\n          throw errorHandler.handleError(error, {\n            component: 'AuthService',\n            action: 'verifyCode'\n          });\n        }\n      });\n      function verifyCode(_x2) {\n        return _verifyCode.apply(this, arguments);\n      }\n      return verifyCode;\n    }()\n  }, {\n    key: \"signOut\",\n    value: function () {\n      var _signOut = _asyncToGenerator(function* () {\n        try {\n          yield firebaseSignOut(this.auth);\n          this.verificationId = null;\n          if (this.recaptchaVerifier) {\n            yield this.recaptchaVerifier.clear();\n            this.recaptchaVerifier = null;\n          }\n        } catch (error) {\n          throw errorHandler.handleError(error, {\n            component: 'AuthService',\n            action: 'signOut'\n          });\n        }\n      });\n      function signOut() {\n        return _signOut.apply(this, arguments);\n      }\n      return signOut;\n    }()\n  }, {\n    key: \"isAuthenticated\",\n    value: function () {\n      var _isAuthenticated = _asyncToGenerator(function* () {\n        var _this2 = this;\n        return new Promise(function (resolve) {\n          var unsubscribe = _onAuthStateChanged(_this2.auth, function (user) {\n            unsubscribe();\n            resolve(!!user);\n          });\n        });\n      });\n      function isAuthenticated() {\n        return _isAuthenticated.apply(this, arguments);\n      }\n      return isAuthenticated;\n    }()\n  }, {\n    key: \"getCurrentUser\",\n    value: function getCurrentUser() {\n      return this.auth.currentUser;\n    }\n  }, {\n    key: \"onAuthStateChanged\",\n    value: function onAuthStateChanged(callback) {\n      return _onAuthStateChanged(this.auth, callback);\n    }\n  }]);\n}();\nvar authService = new AuthService();\nexport default authService;","map":{"version":3,"names":["PhoneAuthProvider","signInWithCredential","signOut","firebaseSignOut","onAuthStateChanged","RecaptchaVerifier","auth","errorHandler","AuthService","_classCallCheck","verificationId","recaptchaVerifier","_createClass","key","value","initRecaptcha","containerId","_this","window","size","callback","console","log","expiredCallback","render","catch","error","handleError","component","action","_initiatePhoneVerification","_asyncToGenerator","phoneNumber","Error","provider","verifyPhoneNumber","clear","initiatePhoneVerification","_x","apply","arguments","_verifyCode","code","credential","userCredential","user","verifyCode","_x2","_signOut","_isAuthenticated","_this2","Promise","resolve","unsubscribe","isAuthenticated","getCurrentUser","currentUser","authService"],"sources":["/project/sandbox/user-workspace/photocopier-print-cost-calculator/src/services/AuthService.js"],"sourcesContent":["import { \n  PhoneAuthProvider,\n  signInWithCredential,\n  signOut as firebaseSignOut,\n  onAuthStateChanged,\n  RecaptchaVerifier\n} from 'firebase/auth';\nimport { auth } from './firebaseConfig';\nimport errorHandler from '../utils/errorHandler';\n\nclass AuthService {\n  constructor() {\n    this.verificationId = null;\n    this.auth = auth;\n    this.recaptchaVerifier = null;\n  }\n\n  // Initialize reCAPTCHA verifier\n  initRecaptcha(containerId) {\n    try {\n      if (typeof window !== 'undefined' && !this.recaptchaVerifier) {\n        // Create reCAPTCHA verifier instance\n        this.recaptchaVerifier = new RecaptchaVerifier(this.auth, containerId, {\n          size: 'normal',\n          callback: () => {\n            // reCAPTCHA solved, allow signInWithPhoneNumber.\n            console.log('reCAPTCHA verified');\n          },\n          'expired-callback': () => {\n            // Reset the reCAPTCHA\n            console.log('reCAPTCHA expired');\n            this.recaptchaVerifier = null;\n            this.initRecaptcha(containerId);\n          }\n        });\n\n        // Render the reCAPTCHA widget\n        this.recaptchaVerifier.render().catch((error) => {\n          console.error('Error rendering reCAPTCHA:', error);\n          this.recaptchaVerifier = null;\n        });\n      }\n    } catch (error) {\n      console.error('Error initializing reCAPTCHA:', error);\n      throw errorHandler.handleError(error, {\n        component: 'AuthService',\n        action: 'initRecaptcha',\n      });\n    }\n  }\n\n  // Initialize phone number verification\n  async initiatePhoneVerification(phoneNumber) {\n    try {\n      if (!this.recaptchaVerifier) {\n        throw new Error('reCAPTCHA not initialized. Please try again.');\n      }\n\n      const provider = new PhoneAuthProvider(this.auth);\n      \n      // Get a verification ID before initiating the second factor flow\n      this.verificationId = await provider.verifyPhoneNumber(\n        phoneNumber,\n        this.recaptchaVerifier\n      );\n\n      return this.verificationId;\n    } catch (error) {\n      console.error('Error initiating phone verification:', error);\n      \n      // Reset reCAPTCHA if there's an error\n      if (this.recaptchaVerifier) {\n        await this.recaptchaVerifier.clear();\n        this.recaptchaVerifier = null;\n      }\n      \n      throw errorHandler.handleError(error, {\n        component: 'AuthService',\n        action: 'initiatePhoneVerification',\n        phoneNumber,\n      });\n    }\n  }\n\n  // Verify the SMS code and sign in\n  async verifyCode(code) {\n    try {\n      if (!this.verificationId) {\n        throw new Error('No verification ID found. Please request a new code.');\n      }\n\n      const credential = PhoneAuthProvider.credential(\n        this.verificationId,\n        code\n      );\n\n      const userCredential = await signInWithCredential(this.auth, credential);\n\n      // Clear verification data after successful sign in\n      this.verificationId = null;\n      if (this.recaptchaVerifier) {\n        await this.recaptchaVerifier.clear();\n        this.recaptchaVerifier = null;\n      }\n\n      return userCredential.user;\n    } catch (error) {\n      console.error('Error verifying code:', error);\n      throw errorHandler.handleError(error, {\n        component: 'AuthService',\n        action: 'verifyCode',\n      });\n    }\n  }\n\n  // Sign out\n  async signOut() {\n    try {\n      await firebaseSignOut(this.auth);\n      // Clear any remaining verification data\n      this.verificationId = null;\n      if (this.recaptchaVerifier) {\n        await this.recaptchaVerifier.clear();\n        this.recaptchaVerifier = null;\n      }\n    } catch (error) {\n      throw errorHandler.handleError(error, {\n        component: 'AuthService',\n        action: 'signOut',\n      });\n    }\n  }\n\n  // Check if user is authenticated\n  async isAuthenticated() {\n    return new Promise((resolve) => {\n      const unsubscribe = onAuthStateChanged(this.auth, (user) => {\n        unsubscribe();\n        resolve(!!user);\n      });\n    });\n  }\n\n  // Get current user\n  getCurrentUser() {\n    return this.auth.currentUser;\n  }\n\n  // Subscribe to auth state changes\n  onAuthStateChanged(callback) {\n    return onAuthStateChanged(this.auth, callback);\n  }\n}\n\nconst authService = new AuthService();\nexport default authService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}